計算機程式作業
==============================================================================
Structure/Class 9
==============================================================================

01.

"大學 University"需要設計成 Structure/Class。

高中職畢業生希望選擇心目中理想的大學。
假設每一大學可以用下列七種屬性表示：

BC(Big Campus)：代表有大校園。
NC(Next to City)：代表鄰近有大城市。
CT(Convenient Transportation)：代表交通方便。
NS(Next to Sea)：代表靠海。
NM(Next to Mountain)：代表依山。
HL(Has Lake)：代表校園有湖。
NL(Near Landscape)：代表附近有風景區。

使用者可輸入理想中的大學條件，用 + 號區格的條件代表 "或" 的關係。

例如： BC NS + CT HL 代表需找出有大校園且靠海，或交通方便且校園有湖的所有大學名稱。

輸入說明：

第一行有一個正整數，代表大學個數 n ，請注意 n<=10 。

其後 n 行，每一行第一項為大學名稱，接著為大學具備的屬性。
大學名稱及各屬性間以一個空白分隔。
一個大學名稱最多有 10 個字母，各項屬性為 2 個字母。大學與屬性資料均為英文字母，

接下來的一行有一個正整數，為查詢的個數 m ， m<=10 。

其後 m 行，每一行有一個查詢。
查詢條件為校園屬性組成，每個校園屬性為兩個字元，
用 + 號區格的條件代表 "或" 的關係，沒有 + 區隔的條件代表 "且" 的關係。
屬性之間以及和 + 之間可能有空白，也可能沒有空白。
其格式為以下任一種:

XXYY+AABB
XX YY + AA BB

意思為屬性條件為: XX且YY，或是 AA 且 BB。


輸出說明：
印出 m 行，第 i 列印出第 i 個查詢中，所有符合之大學名稱。
若有多個大學符合一個查詢，各大學間以一個空白分隔。

Sample Input:

5
NSYSU NC CT NS NM
NTU BC NC CT NS
NCCU BC NL HL
Providence BC NC
NTHU BC NS
2
BC NS + CT HL
NM + BC NL + BC NC

Sample Output:
NTU NTHU
NSYSU NTU NCCU Providence

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

02. 

"電腦 Computer"需要設計成 Structure/Class。

電腦在網際網路的 ip 位址是由四個正整數 (0~255)組成，中間以據點隔開，例如: 

140.124.1.255 

為了方便記憶，可以取一個暱稱。 
同一個網段的網址，第一個和第二個正整數相同。 

請撰寫程式處理一串網址，辨識是否在同一個網段。 

輸入說明: 
------------- 
每一筆是一個網址，加上其暱稱，中間以逗號間隔。 
0.0.0.0,none 為結束輸入符號。 

輸出說明: 
---------- 
以暱稱顯示所有同網段的電腦， 
印出的順序為輸入順序，其格式為 

machines [暱稱 1] and [暱稱 2] are on the same local network. 

若有三個相同(依此類推)，其格式為 
machines [暱稱 1], [暱稱 2] and [暱稱 3] are on the same local network. 

若有不合法的網址輸入 (任一數字>255)，輸出錯誤訊息置於最後， 
每一個錯誤 ip 輸出一行，輸出的順序同輸入順序，其格式為 

machine [暱稱] is error ip 

Sample Input: 
------------------------ 
111.22.3.44,blue 
55.66.7.88,red 
111.22.55.55,black 
111.2.5.66,green 
555.66.1.2,John 
111.22.1.1,Tom 
55.66.11.22,Mary 
1111.1.1.1,Ken 
0.0.0.0,none 

Sample Output: 
--------------------- 
machines blue, black and Tom are on the same local network. 
machines red and Mary are on the same local network. 
machine John is error ip 
machine Ken is error ip

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

03. 

高精確度小數運算 High_Precision

http://youtu.be/vr9S0xH5t6A

"高精確度小數 High_Precision"需要設計成 Structure/Class，
表達一個 40 位十進位數字的精確度，包含

digit 一個 40 元素的整數陣列，
decpt 一個整數表達小數點的位置。
sign 一個整數表達正負號。

例如 -8.127 和 0.0094328 可以被存成

digit=8127
decpt=1
sign=-1

digit=94328
decpt=-2
sign=1

製作function 

1.從使用者取得數字，偵測格式錯誤，若錯誤回傳 -1。
2.印出此結構的值。
3. 計算兩個數的相加、相減、相乘，若超過精確度，無條件捨去。

輸入說明：
--------------------
-8.127
0.0094328
a

第1行為 被加數
第2行為 加數
第3行為 運算符號 a (+) 、 s (-) 、 m (*)

輸出說明：
--------------------
digit=81175672 (一個 20 元素的整數陣列，最後為 0 不顯示)
decpt=1 (小數點的位置)
sign=-1 (正負號)

若輸入數值格式錯誤，則輸出
input error


Sample Input:	
-------------------
-8.127 
0.0094328 
a	

Sample Output:
-------------------
digit=81175672 
decpt=1 
sign=-1

Sample Input:
-------------------
-05434510.7
-0.1
m


Sample Output:
-------------------
input error


Sample Input:
-------------------
-11.15415618
-1.148484
s

Sample Output:
-------------------
digit=1000567218 
decpt=2
sign=-1




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

04. 

Shape（圖形）, Circle（圓）, Rectangle（矩形）, Square（正方形）, Triangle（三角形）。
需要設計成 Structure/Class，圓有半徑，矩形有寬和高，正方形有邊長，三角形有三個邊。

輸入說明 ：

第一行輸入圖形個數 N。

第二行到第 N+1 行輸入圖形種類、以及該圖形所需整數資料，以空白間隔。

圖形種類以字元表示，C 代表圓、R 代表矩形、S 代表正方形、T 代表三角形。

如果輸入 C 要跟隨一個數值為半徑，
    輸入 R 要跟隨兩個數值寬和高，
    輸入 S 要跟隨一個數值代表邊長，
    輸入 T 要跟隨三個數值代表三個邊。


輸出說明：

輸出 N+1行，

前 N  行整數，代表 N 個圖形的周長。

第 N+1行整數，代表 N 個圖形的周長總和。

PI 設為 4。

Sample Input:
---------------
5
T 3 4 5
S 1
R 2 3
C 1
T 3 4 6

Sample Output:

12
4
10
8
13
47

(http://www.cc.ntut.edu.tw/~jykuo/course/ploym01.c)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

05. 

多項式單一項、多項式，均要設計成 Sturcture/Class。

輸入兩個多項式，輸出相加的結果。例如:

2x^4 + 3x^3 + x -1
x^5 - x^3 + 4x^2 - 3x +2

結果：

x^5 + 2x^4 + 2x^3 +4x^2 - 2x + 1

-----------
輸入說明

輸入兩筆資料，分別代表兩個多項數。
每一筆輸入 n 個整數，第一個代表 n-1次方的係數，第 n 個代表 0 次方係數。

----------
輸出說明

兩個多項式相加後的係數。
----------------
Sample Input

2 3 0 1 -1
1 0 -1 4 -3 2

------------
Sample Output
1 2 2 4 -2 1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
06.

定義 Student 為 Class/Structure，包含 
  int id;//學號 
  int score;//分數 

定義 Class 為 Class/Structure，包含 
  Student;
  next Student; 指向下一個學生
  void print 印出所有學生資料
  int insertInOrder 加入一個學生資料，依照分數由小到大順序 
  int deleteStudent; // 刪除特定學號的資料 

------------------ 
輸入說明： 

1. 輸入 p 表示印出 List 內容 
2. 輸入 i 表示加入一筆資料，接著輸入學號、分數，並依照由小到大分數順序 
例如 1,2， 以逗號隔開，中間沒有空白 
3. 輸入 d 表示刪除特定學生，接著輸入學號 
4. 輸入 e 結束程式。 

----------------- 
輸出說明： 

p (印出): 
1. list 空的，印出 null。 
2. list 內有元素，按照分數排列，印出學號、分數，中間以逗號間隔。 
3. 分數相同則學號小的在前。 
i (新增): 
1. 新增資料後輸出Insert data %d:%d, Compare:%d., student_t.id, student_t.score, compareTimes 
d (刪除): 
1. 若成功刪除學生輸出Delete student %d successful., id 
2. 若學生不存在的話輸出Student %d is not exist., id 

----------------- 
Sample Input: 

p 
d 
1 
i 
1,2 
p 
i 
3,0 
p 
i 
2,99 
p 
i 
0,99 
p 
i 
7,99 
p 
i 
8,0 
p 
d 
2 
p 
e 

---------------------- 
Sample Output: 

null 
Student 1 is not exist. 
Insert data 1:2, compare:0. 
1:2 
Insert data 3:0, compare:1. 
3:0,1:2 
Insert data 2:99, compare:2. 
3:0,1:2,2:99 
Insert data 0:99, compare:3. 
3:0,1:2,0:99,2:99 
Insert data 7:99, compare:4. 
3:0,1:2,0:99,2:99,7:99 
Insert data 8:0, compare:2. 
3:0,8:0,1:2,0:99,2:99,7:99 
Delete student 2 successful. 
3:0,8:0,1:2,0:99,7:99

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
07.

Stack 需設計成使用 Structure/Class，並使用串列 Link list實作，
操作複雜度均為 O(1)。 

Stack 允許在一端進行後進先出（LIFO, Last In First Out）的操作：
push：將數據放入堆疊的頂端（陣列形式或串列形式），堆疊頂端top指標加一。 
pop：將頂端數據資料輸出（回傳），堆疊頂端資料減一。 

輸入說明: 
1: 代表 push，再輸入整數 
2: 印出 pop 回傳的數字， The data %d is pop 
   若stack中為空則印出 The Stack is empty 
3: 結束程式。 

Sample Input 
1 2 
1 5 
2 
1 3 
2 
2 
1 3 
2 
2 
3 

Sample output 
The data 5 is pop 
The data 3 is pop 
The data 2 is pop 
The data 3 is pop 
The Stack is empty

(https://youtu.be/w3nwIuhZ2K0)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
08.

Queue 需設計成使用 Structure/Class，並使用串列 Link list實作，
操作複雜度均為 O(1)。功能說明： 

1. CreateQueue 
建立一個Queue，並給予Queue的名稱。 

2. EnQueue 
輸入一個Queue的名稱，並插入資料 (int)， 
若Queue的名稱不存在，則 printf("Queue %s isn't exist", name)。 

3. DeQueue 
輸入一個Queue的名稱，並進行 Dequeue， 
若Queue的名稱不存在，則 printf("Queue %s isn't exist", name)， 
若 queue為空，輸出 Queue is empty。 
若沒有錯誤，只需取出數值，不用輸出。 

4. MergeQueue 
輸入兩個Queue的名稱Ａ,B，進行QueueA與QueueB相接(B接到A)，連接完畢後，刪除QueueB。 
若Queue的名稱不存在，則printf("Queue %s isn't exist", name) 

5. PrintAllQueue 
依序印出所有的Queue, Queue size, Queue element 
printf("****************************************");
printf("Queue Name:%s Queue Size:%d Queue Element:", queue->name, count);
printf("****************************************");
若不存在任何Queue，則printf(Isn't have any queue);
如果queue存在，但queue裡面是空的話 要printf("Queue Name:%s Queue Size:%d Queue Element:Queue is empty", queue->name, count);

6. Exit 

Sample Input 
5 
1 
AAA 
3 
AAA 
1 
BBB 
1 
CCC 
1 
DDD 
1 
EEE 
1 
FFF 
2 
AAA 
1 
2 
AAA 
3 
2 
AAA 
4 
2 
AAA 
5 
2 
AAA 
6 
2 
BBB 
7 
2 
BBB 
8 
2 
BBB 
9 
2 
BBB 
10 
2 
CCC 
11 
2 
CCC 
12 
2 
CCC 
13 
2 
CCC 
14 
2 
CCC 
15 
2 
DDD 
16 
2 
DDD 
17 
2 
DDD 
18 
2 
DDD 
19 
2 
DDD 
20 
2 
EEE 
21 
2 
EEE 
22 
2 
EEE 
23 
2 
EEE 
24 
2 
EEE 
25 
2 
FFF 
26 
2 
FFF 
27 
2 
FFF 
28 
2 
FFF 
29 
2 
FFF 
30 
5 
4 
AAA 
FFF 
5 
4 
BBB 
CCC 
5 
4 
AAA 
BBB 
5 
6 

Sample Output 
**************************************** 
Isn't have any queue 
**************************************** 
Queue is empty 
**************************************** 
Queue Name:AAA Queue Size:5 Queue Element:1 3 4 5 6 
Queue Name:BBB Queue Size:4 Queue Element:7 8 9 10 
Queue Name:CCC Queue Size:5 Queue Element:11 12 13 14 15 
Queue Name:DDD Queue Size:5 Queue Element:16 17 18 19 20 
Queue Name:EEE Queue Size:5 Queue Element:21 22 23 24 25 
Queue Name:FFF Queue Size:5 Queue Element:26 27 28 29 30 
**************************************** 
**************************************** 
Queue Name:AAA Queue Size:10 Queue Element:1 3 4 5 6 26 27 28 29 30 
Queue Name:BBB Queue Size:4 Queue Element:7 8 9 10 
Queue Name:CCC Queue Size:5 Queue Element:11 12 13 14 15 
Queue Name:DDD Queue Size:5 Queue Element:16 17 18 19 20 
Queue Name:EEE Queue Size:5 Queue Element:21 22 23 24 25 
**************************************** 
**************************************** 
Queue Name:AAA Queue Size:10 Queue Element:1 3 4 5 6 26 27 28 29 30 
Queue Name:BBB Queue Size:9 Queue Element:7 8 9 10 11 12 13 14 15 
Queue Name:DDD Queue Size:5 Queue Element:16 17 18 19 20 
Queue Name:EEE Queue Size:5 Queue Element:21 22 23 24 25 
**************************************** 
**************************************** 
Queue Name:AAA Queue Size:19 Queue Element:1 3 4 5 6 26 27 28 29 30 7 8 9 10 11 12 13 14 15 
Queue Name:DDD Queue Size:5 Queue Element:16 17 18 19 20 
Queue Name:EEE Queue Size:5 Queue Element:21 22 23 24 25 
****************************************

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
09.

象棋遊戲中黑白棋子位階依序如下，其中將帥各一隻，卒/兵各五隻，其餘為各 2 隻。
將/帥 (General/King)、士/仕(Guard/Assistant)、象/相(Elephant/Bishop)、
車/?(Rook/Chariot)、馬/傌(Horse/Knight)、包/炮(Bom/Cannon)、卒/兵(Pawn/Soldier)。

黑棋16隻，依位階編碼依序為 101~116。
白棋16隻，依位階編碼依序為 201~216。

其中暗棋遊戲規則為黑白對抗，吃法一般以位階高低為依據，高位階可吃低位階，例外條件為
1. 將/帥為最高階，除了會被卒/兵吃外，可以吃其他棋子。
2. 包/炮隔一個棋子才可吃，可吃任一隻。
3. 相鄰才可以吃子，同位階可互吃。


輸入說明
--------------
在 3x3 陣列中，輸入四顆棋子陣列索引以及編號。


輸出說明
---------------
輸出所有可以吃棋子的組合，以棋子英文輸出。


Sample Input
-------------------
0 0 101
1 1 201
0 1 116
1 0 211
0 2 212
1 2 108
2 1 110
2 0 109
2 2 205

Sample Output
------------------
